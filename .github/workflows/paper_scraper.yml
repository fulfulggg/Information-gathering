name: 論文スクレイパーの実行

on:
  schedule:
    # - cron: '00 11 * * 1-5'  # 月曜日から金曜日の19:30 JST（10:30 UTC）に実行
    - cron: '00 20 * * *'  # 毎日JST朝5時（20:00 UTC）に実行
  workflow_dispatch:  # 手動実行のオプション

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  scrape-and-update:
    name: スクレイプと更新
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 全履歴をフェッチ

      - name: Pythonのセットアップ
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: 依存パッケージのインストール
        run: |
          python -m pip install --upgrade pip
          pip install feedparser requests beautifulsoup4 loguru art lxml

      - name: 論文スクレイパーの実行
        run: python .github/scripts/scraper.py

      - name: 変更の確認とコミット
        id: check_changes
        run: |
          git config --local user.email "hiroshi.nakamura@fulgram.com"
          git config --local user.name "hiroshi-nakamura"
          git add papers.json
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "📚 [paper] スクレイピングした論文データを更新"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: 変更をプッシュしてプルリクエストを作成
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PERSONAL_ACCESS_TOKEN_YUKIHIKO }}
        run: |
          branch_name="update-papers-data-$(date +'%Y%m%d%H%M%S')"
          git checkout -b $branch_name
          git push -u origin $branch_name
          pr_url=$(gh pr create --title "📖 論文データの更新" --body "このプルリクエストは自動的に作成されました。スクレイピングされた最新の論文データが含まれています。" --base main --head $branch_name)
          echo "PR_URL=$pr_url" >> $GITHUB_ENV
          echo "PR_NUMBER=${pr_url##*/}" >> $GITHUB_ENV

      - name: プルリクエストの自動マージ
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PERSONAL_ACCESS_TOKEN_YUKIHIKO }}
          GH_TOKEN: ${{ secrets.YOUR_PERSONAL_ACCESS_TOKEN_YUKIHIKO }}
        run: |
          echo "Waiting for checks to complete..."
          sleep 30
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Attempting to merge PR #$PR_NUMBER"
            
            # PRの状態を確認
            pr_state=$(gh pr view $PR_NUMBER --json state -q .state)
            if [ "$pr_state" != "OPEN" ]; then
              echo "PR is not open (state: $pr_state). Skipping merge."
              exit 0
            fi
            
            # マージ可能性を確認
            mergeable=$(gh pr view $PR_NUMBER --json mergeable -q .mergeable)
            if [ "$mergeable" = "false" ]; then
              echo "PR is not mergeable. Manual intervention required."
              exit 1
            fi
            
            # 直接マージを試みる
            echo "Attempting direct merge..."
            if gh pr merge "$PR_NUMBER" --squash --delete-branch; then
              echo "PR #$PR_NUMBER merged successfully."
            else
              echo "Direct merge failed. Checking error details..."
              
              # エラーの詳細を取得
              gh pr view $PR_NUMBER --json mergeable,mergeStateStatus
              
              # 自動マージを有効にする代替手段
              echo "Attempting to enable auto-merge..."
              if gh pr merge "$PR_NUMBER" --auto --squash --delete-branch; then
                echo "Auto-merge enabled for PR #$PR_NUMBER."
                echo "PR will be merged automatically when all requirements are met."
              else
                echo "Failed to enable auto-merge. The PR may require manual review."
                echo "Please check: https://github.com/fulfulggg/Information-gathering/pull/$PR_NUMBER"
                # ワークフローは成功として扱う（PRは作成されている）
                exit 0
              fi
            fi
          else
            echo "プルリクエスト番号が見つかりません。マージをスキップします。"
          fi
