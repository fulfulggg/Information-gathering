name: 論文スクレイパーの実行

on:
  schedule:
    # - cron: '00 11 * * 1-5'  # 月曜日から金曜日の19:30 JST（10:30 UTC）に実行
    - cron: '00 20 * * *'  # 毎日JST朝5時（20:00 UTC）に実行
  workflow_dispatch:  # 手動実行のオプション

permissions:
  contents: write
  pull-requests: write

jobs:
  scrape-and-update:
    name: スクレイプと更新
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 全履歴をフェッチ

      - name: Pythonのセットアップ
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: 依存パッケージのインストール
        run: |
          python -m pip install --upgrade pip
          pip install feedparser requests beautifulsoup4 loguru art lxml

      - name: 論文スクレイパーの実行
        run: python .github/scripts/scraper.py

      - name: 変更の確認とコミット
        id: check_changes
        run: |
          git config --local user.email "hiroshi.nakamura@fulgram.com"
          git config --local user.name "hiroshi-nakamura"
          git add papers.json
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "📚 [paper] スクレイピングした論文データを更新"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: 変更をプッシュしてプルリクエストを作成
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PERSONAL_ACCESS_TOKEN_YUKIHIKO }}
        run: |
          branch_name="update-papers-data-$(date +'%Y%m%d%H%M%S')"
          git checkout -b $branch_name
          git push -u origin $branch_name
          pr_url=$(gh pr create --title "📖 論文データの更新" --body "このプルリクエストは自動的に作成されました。スクレイピングされた最新の論文データが含まれています。" --base main --head $branch_name)
          echo "PR_URL=$pr_url" >> $GITHUB_ENV

      - name: プルリクエストの自動マージ
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PERSONAL_ACCESS_TOKEN_YUKIHIKO }}
        run: |
          if [ -n "$PR_URL" ]; then
            pr_number=$(echo $PR_URL | awk -F'/' '{print $NF}')
            
            # PRのマージ可能状態を確認（最大30秒待機）
            echo "PRのマージ可能状態を確認中..."
            max_attempts=6
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              # PRの状態を取得
              pr_status=$(gh pr view $pr_number --json mergeable,mergeStateStatus --jq '.mergeable')
              merge_state=$(gh pr view $pr_number --json mergeStateStatus --jq '.mergeStateStatus')
              
              echo "PR状態 - マージ可能: $pr_status, マージ状態: $merge_state"
              
              # マージ可能な状態になったら処理を進める
              if [ "$pr_status" = "MERGEABLE" ] && [ "$merge_state" = "CLEAN" ]; then
                echo "PRはマージ可能な状態です。マージを実行します。"
                # 直接マージを試行（既にCLEAN状態の場合）
                if gh pr merge $pr_number --squash --delete-branch; then
                  echo "PRを正常にマージしました。"
                else
                  # 失敗した場合は自動マージを有効化
                  echo "直接マージに失敗しました。自動マージを設定します。"
                  gh pr merge $pr_number --auto --squash --delete-branch || {
                    echo "警告: 自動マージの設定に失敗しましたが、PRは後でマージされる可能性があります。"
                  }
                fi
                break
              elif [ "$merge_state" = "BLOCKED" ] || [ "$merge_state" = "BEHIND" ]; then
                echo "PRはまだマージできません。自動マージを有効化します。"
                gh pr merge $pr_number --auto --squash --delete-branch || {
                  echo "警告: 自動マージの設定に失敗しました。"
                }
                break
              fi
              
              attempt=$((attempt + 1))
              if [ $attempt -lt $max_attempts ]; then
                echo "5秒後に再試行します... (試行 $attempt/$max_attempts)"
                sleep 5
              fi
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "警告: タイムアウトしました。PRは手動でマージする必要があるかもしれません。"
              # 最後の手段として自動マージを試行
              gh pr merge $pr_number --auto --squash --delete-branch || true
            fi
          else
            echo "プルリクエストのURLが見つかりません。マージをスキップします。"
          fi
